import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType
import requests
from random import randrange
import time
import random
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
from vk_api.utils import get_random_id
from dating.sql_partners import User_VK, DatingUser, Photo, session


class Bot(object):
    def __init__(self, token, token_search, group_id):
        self.group_id = group_id
        self.token_search = token_search
        self.token = token
        self.vk = vk_api.VkApi(token=self.token)
        self.headers = {'Content-type': 'application/json', 'Accept': 'text/plain', 'Content-Encoding': 'utf-8'}

    def write_msg(self, user_id, message, attachment=None, keyboard=None):
        """–§—É–Ω–∫—Ü–∏—è –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π —É—á–∞—Å—Ç–Ω–∏–∫—É –≥—Ä—É–ø–ø—ã"""
        values = {'user_id': user_id, 'message': message, 'random_id': randrange(10 ** 7)}
        if attachment:
            values['attachment'] = attachment
        if keyboard:
            values['keyboard'] = keyboard
        self.vk.method('messages.send', values)

    def start(self):
        """–§—É–Ω–∫—Ü–∏—è, –æ–∂–∏–¥–∞—é—â–∞—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≥—Ä—É–ø–ø—ã, –¥–ª—è –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ø–æ–ª—É—á–µ–Ω–∏—è ID."""
        for event in longpoll.listen():
            if event.type == VkEventType.MESSAGE_NEW and event.to_me and event.text:
                text = event.text.lower()
                keyboard = VkKeyboard(one_time= False)
                keyboard.add_button('–î–∞', color=VkKeyboardColor.PRIMARY)
                keyboard.add_button('–ü–æ–∑–∂–µ', color=VkKeyboardColor.SECONDARY)
                keyboard = keyboard.get_keyboard()
                if event.from_user:
                    self.write_msg(event.user_id, f'{bot.get_fullname(event.user_id)[0]}, –ø—Ä–∏–≤–µ—Ç! \n'
                                                  f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø—É –í—Å—Ç—Ä–µ—á–∏ –∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞! \n'
                                                  '–•–æ—á–µ—à—å –Ω–∞–π—Ç–∏ —Å–µ–±–µ –ø–∞—Ä—É?', keyboard=keyboard)
                    for event in longpoll.listen():
                        if event.type == VkEventType.MESSAGE_NEW and event.to_me and event.text:
                            text = event.text.lower()
                            if text != '–¥–∞':
                                self.write_msg(event.user_id, '–ö–∞–∫ –±—É–¥–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è, –Ω–∞–ø–∏—à–∏ –º–Ω–µ!')
                                return None
                            else:
                                self.write_msg(event.user_id, '–û—Ç–ª–∏—á–Ω–æ! –¢–æ–≥–¥–∞ –Ω–∞—á–Ω–µ–º!')
                                break
                    return event.user_id

    def get_fullname(self, client_id):
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ò–º–µ–Ω–∏ –∏ –§–∞–º–∏–ª–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"""
        params_user = {'access_token': self.token_search, 'user_ids': client_id,
                       'fields': 'first_name,last_name', 'v': 5.124}
        info = requests.get(f'https://api.vk.com/method/users.get', params=params_user).json()['response'][0]
        self.first_name = info['first_name']
        self.last_name = info['last_name']
        return self.first_name, self.last_name

    def get_city(self, client_id):
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è"""
        params_user = {'access_token': self.token_search, 'user_ids': client_id,
                       'fields': 'city', 'v': 5.124}
        info = requests.get(f'https://api.vk.com/method/users.get', params=params_user).json()['response'][0]
        if 'city' in info:
            self.city = info['city']['title']
            return self.city
        elif 'city' not in info:
            self.write_msg(client_id, '–£–∫–∞–∂–∏ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –∏—â–µ—à—å –ø–∞—Ä—Ç–Ω–µ—Ä–∞? –ù–∞–ø—Ä–∏–º–µ—Ä, –ú–æ—Å–∫–≤–∞')
            for event in longpoll.listen():
                if event.type == VkEventType.MESSAGE_NEW and event.to_me and event.text:
                    self.city = event.text
                    param_city = {'access_token': self.token_search, 'country_id': '1',
                                  'q': self.city, 'count': '1', 'v': 5.124}
                    city = requests.get(f'https://api.vk.com/method/database.getCities', params=param_city,
                                     headers=self.headers).json()['response']['items']
                    if len(city) != 0:
                        print(self.city)
                        return self.city
                    else:
                        self.write_msg(client_id, f'–ù–µ –Ω–∞—à–µ–ª –≥–æ—Ä–æ–¥–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º {self.city}. \n'
                                                  f'–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, –ú–æ—Å–∫–≤–∞')
        return self.city

    def get_gender(self, client_id):
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–∞"""
        keyboard = VkKeyboard(one_time=False)
        keyboard.add_button('–î–µ–≤—É—à–∫–∞ üë©', color=VkKeyboardColor.PRIMARY)
        keyboard.add_button('–ü–∞—Ä–µ–Ω—å üë®', color=VkKeyboardColor.POSITIVE)
        keyboard.add_button('–õ—é–±–æ–≥–æ –ø–æ–ª–∞', color=VkKeyboardColor.SECONDARY)
        keyboard = keyboard.get_keyboard()
        self.write_msg(client_id, '–ü–∞—Ä—Ç–Ω–µ—Ä–∞ –∫–∞–∫–æ–≥–æ –ø–æ–ª–∞ –±—É–¥–µ–º –ø–æ–¥–±–∏—Ä–∞—Ç—å?', keyboard=keyboard)
        for event in longpoll.listen():
            if event.type == VkEventType.MESSAGE_NEW and event.to_me and event.text:
                text = event.text
                if text == '–î–µ–≤—É—à–∫–∞ üë©':
                    self.gender = '1'
                    return self.gender
                elif text == '–ü–∞—Ä–µ–Ω—å üë®':
                    self.gender = '2'
                    return self.gender
                elif text == '–õ—é–±–æ–≥–æ –ø–æ–ª–∞':
                    self.gender = '0'
                    return self.gender

    def get_birth_year(self, pair_id):
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è"""
        params_user = {'access_token': self.token_search, 'user_ids': winner,
                       'fields': 'bdate,city', 'v': 5.124}
        info = requests.get(f'https://api.vk.com/method/users.get', params=params_user).json()['response'][0]
        if 'bdate' in info:
            self.bdate = info['bdate']
        else:
            self.bdate = '0'
        return self.bdate

    def get_age_from(self, client_id):
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
        self.write_msg(client_id, '–£–∫–∞–∂–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –≤ —Ü–∏—Ñ—Ä–∞—Ö. –ù–∞–ø—Ä–∏–º–µ—Ä, 25')
        for event in longpoll.listen():
            if event.type == VkEventType.MESSAGE_NEW and event.to_me and event.text:
                self.age_from = int(event.text)
                if 18 < self.age_from < 100:
                    return self.age_from
                else:
                    self.write_msg(client_id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã —É–∫–∞–∑–∞–ª –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –≤–æ–∑—Ä–∞—Å—Ç. \n'
                                              '–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑. –ù–∞–ø—Ä–∏–º–µ—Ä, 25')

    def get_age_to(self, client_id):
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"""
        self.write_msg(client_id, '–£–∫–∞–∂–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –≤ —Ü–∏—Ñ—Ä–∞—Ö. –ù–∞–ø—Ä–∏–º–µ—Ä, 30')
        for event in longpoll.listen():
            if event.type == VkEventType.MESSAGE_NEW and event.to_me and event.text:
                self.age_to = int(event.text)
                if self.age_to >= 100:
                    self.write_msg(client_id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç—ã —É–∫–∞–∑–∞–ª –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –≤–æ–∑—Ä–∞—Å—Ç. \n'
                                              '–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑. –ù–∞–ø—Ä–∏–º–µ—Ä, 30')
                elif self.age_to >= self.age_from:
                    self.write_msg(client_id, '–û—Ç–ª–∏—á–Ω–æ!')
                    time.sleep(0.5)
                    self.write_msg(client_id, '–ú–∏–Ω—É—Ç–æ—á–∫—É..... \n'
                                              '–ò—â—É –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤....')
                    return self.age_to
                else:
                    self.write_msg(client_id, f'–≠—Ç–∞ –≤–æ–∑—Ä–∞—Å—Ç –º–µ–Ω—å—à–µ, —á–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–æ–±–æ–π –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –ø–∞—Ä—Ç–Ω–µ—Ä–∞.\n'
                                              f'–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! –£–∫–∞–∂–∏ –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ –º–µ–Ω—å—à–µ, —á–µ–º {self.age_from}')

    def search_partners(self, client_id):
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""
        candidate_param = {'access_token': self.token_search, 'is_closed': 'False', 'has_photo': '1',
                         'sex': self.gender, 'status': '6', 'hometown': self.city, 'age_from': self.age_from,
                         'age_to': self.age_to, 'count': '20', 'v': 5.124}
        candidate_list = requests.get(f'https://api.vk.com/method/users.search',
                                      params=candidate_param, headers=self.headers).json()['response']['items']
        time.sleep(0.2)
        # —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ ID –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ VK
        self.list_partner = []
        for partner in candidate_list:
            if partner['is_closed'] is False:
                self.list_partner.append(partner['id'])

        if len(self.list_partner) == 0:
            self.write_msg(client_id, '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ —Ç–≤–æ–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º. '
                                      '–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑. \n'
                                      '–ü—Ä–∏—à–ª–∏ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –º—ã –Ω–∞—á–Ω–µ–º –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫. ')
        return self.list_partner

    def choose_3photo(self, partner_id):
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""
        photo_param = {'access_token': self.token_search, 'owner_id': partner_id, 'album_id': 'profile',
                       'extended': '1', 'count': '20', 'photo_sizes': '0', 'v': 5.124}
        photo_list = requests.get(f'https://api.vk.com/method/photos.get',
                                  params=photo_param, headers=self.headers).json()['response']
        time.sleep(0.5)
        # —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ñ–æ—Ç–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ª–∞–π–∫–æ–≤
        photo_dict = {}
        if photo_list['count'] >= 3:
            for photo in photo_list['items']:
                photo_id = photo['id']
                likes = photo['likes']['count']
                link = photo['sizes'][-1]['url']
                photo_dict[likes] = f'photo{partner_id}_{photo_id}'
        else:
            pass
        # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∫–ª—é—á—É (–ª–∞–π–∫–∞–º)
        photo_dict = {lks: photo_dict[lks] for lks in sorted(photo_dict, reverse=True)}
        # –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø 3 —Ñ–æ—Ç–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, —É–¥–æ–±–Ω–æ–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫—É –≥—Ä—É–ø–ø—ã
        self.photos = list(photo_dict.values())[0:3]
        return self.photos

    def get_photo_info(self, photo_id):
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ª–∞–π–∫–æ–≤ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–æ—Ç–æ) –ø–æ ID —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"""
        photo_param = {'access_token': self.token_search, 'photos': photo_id, 'extended': '1', 'v': 5.124}
        photo_info = requests.get(f'https://api.vk.com/method/photos.getById',
                                  params=photo_param, headers=self.headers).json()['response']
        link = photo_info[0]['sizes'][-1]['url']
        likes = photo_info[0]['likes']['count']
        return link, likes

    def send_photo(self, client_id, partner_id):
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ 3—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —É—á–∞—Å—Ç–Ω–∏–∫—É –≥—Ä—É–ø–ø—ã"""
        all_photo = ",".join(self.photos)
        time.sleep(0.5)
        full_name_partner = ' '.join(bot.get_fullname(partner_id))
        ph_param = {'access_token': self.token, 'user_id': client_id, 'message': f'{full_name_partner} ',
                    'random_id': random.getrandbits(64), 'attachment': all_photo, 'v': 5.124}
        response = requests.get(f'https://api.vk.com/method/messages.send',
                                params=ph_param, headers=self.headers).json()
        return response

    def choose_candidates(self, client_id, partner_id, partners_list, black_list):
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å —Ü–µ–ª—å—é –≤—ã–±–æ—Ä–∞ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"""
        numbers_candidates = {}
        keyboard = VkKeyboard(one_time=False)
        keyboard.add_button('–ù—Ä–∞–≤–∏—Ç—Å—è üëç', color=VkKeyboardColor.PRIMARY)
        keyboard.add_button('–ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è üëé', color=VkKeyboardColor.NEGATIVE)
        keyboard.add_line()
        keyboard.add_button('–°–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä –∏–∑ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è üëÜ', color=VkKeyboardColor.POSITIVE)
        keyboard = keyboard.get_keyboard()
        self.write_msg(client_id, '–í—ã–±–∏—Ä–∞–π... ', keyboard=keyboard)
        for event in longpoll.listen():
            if event.type == VkEventType.MESSAGE_NEW and event.to_me and event.text:
                text = event.text
                if text == '–ù—Ä–∞–≤–∏—Ç—Å—è üëç':
                    partners_list.append(partner_id)
                    break
                elif text == '–ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è üëé':
                    black_list.append(partner_id)
                    break
                elif text == '–°–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä –∏–∑ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è üëÜ':
                    for i, partner_id in enumerate(partners_list, 1):
                        self.write_msg(client_id, f'–ö–∞–Ω–¥–∏–¥–∞—Ç ‚Ññ{i} {" ".join(bot.get_fullname(partner_id))}')
                        bot.choose_3photo(partner_id)
                        bot.send_photo(client_id, partner_id)
                        numbers_candidates[i] = partner_id
                    self.write_msg(client_id, '–ü–æ—Ä–∞ —Å–¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä. –ü—Ä–∏—à–ª–∏ –Ω–æ–º–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞')
                    for event in longpoll.listen():
                        if event.type == VkEventType.MESSAGE_NEW and event.to_me and event.text:
                            text = event.text
                            if int(text) not in list(numbers_candidates.keys()):
                                self.write_msg(client_id, f'–ö–∞–Ω–¥–∏–¥–∞—Ç —Å –Ω–æ–º–µ—Ä–æ–º {int(text)} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –Ω–∞—à–µ–º —Å–ø–∏—Å–∫–µ. '
                                                          f'–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑, –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ —Ü–∏—Ñ—Ä–∞–º–∏.')
                            for number, self.partner in numbers_candidates.items():
                                if int(text) == number:
                                    full_name_pair = " ".join(bot.get_fullname(self.partner))
                                    link_pair = f'https://vk.com/id{self.partner}'
                                    self.write_msg(client_id, f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! {full_name_pair} - –æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! \n'
                                                              f'–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–±–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞ {link_pair}')
                                    winner_pair = self.partner
                                    partners_list.append(winner_pair)
                                    return self.partner

    def save_user(self, client_id):
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ –≥—Ä—É–ø–ø—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        table_user = User_VK(client_id, self.first_name, self.last_name, self.city)
        session.add(table_user)
        session.commit()
        return table_user

    def save_partner(self, pair_id, client_id):
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        bot.get_birth_year(winner)
        table_datinguser = DatingUser(winner, self.first_name, self.last_name, self.bdate, client_id)
        session.add(table_datinguser)
        session.commit()
        return table_datinguser

    def save_photoslink(self, pair_id):
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–ø 3 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        photo_top = bot.choose_3photo(winner)
        # –ø–æ–ª—É—á–∞–µ–º ID 3—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        photo_link = []
        for photo in photo_top:
            photo_link.append(photo[5:])
        # –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∞–π–∫–æ–≤ –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        for photo_id in photo_link:
            photo_data = bot.get_photo_info(photo_id)
            likes_photo = photo_data[1]
            link_photo1 = photo_data[0]
            # —Å–æ–∑—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            table_Photos = Photo(winner, likes_photo, link_photo1)
            session.add(table_Photos)
        session.commit()
        return '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö'

if __name__ == "__main__":
    group_id = '198765605'
    token = '...'
    token_search = '...'
    vk = vk_api.VkApi(token=token)
    longpoll = VkLongPoll(vk)

    for event in longpoll.listen():
        bot = Bot(token, token_search, group_id)
        client_id = event.user_id
        bot.start()
        bot.get_fullname(client_id)
        bot.get_city(client_id)
        bot.get_gender(client_id)
        bot.get_age_from(client_id)
        bot.get_age_to(client_id)
        print(bot.save_user(client_id))
        # —Å–ø–∏—Å–æ–∫ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        partners_list = []
        # —á–µ—Ä–Ω—ã–π –ª–∏—Å—Ç
        black_list = []
        for partner_id in bot.search_partners(client_id):
            if len(bot.choose_3photo(partner_id)) == 3:
                bot.send_photo(client_id, partner_id)
                if bot.choose_candidates(client_id, partner_id, partners_list, black_list) != None:
                    break
        print(f'–°–ø–∏—Å–æ–∫ ID –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {partners_list}')
        print(f'ID –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –ø–æ–ø–∞–≤—à–∏—Ö –≤ —á–µ—Ä–Ω—ã–π –ª–∏—Å—Ç: {black_list}')
        # –ø–æ–ª—É—á–∞–µ–º ID –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
        winner = partners_list[-1]
        print(bot.save_partner(winner, client_id))
        print(bot.save_photoslink(winner))



